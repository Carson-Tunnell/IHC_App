Documentation for Code found in this repo.

----------------------------------------------------Distance Code----------------------------------------------------

Distance.py
    debug = boolean 
        boolean to enable or disable debug statments in the code
        
    def load_shp(filename,simple=True)
        Arguments:
            filename: string
                filepath to Shape file directory to open
            simple(optional): boolean  
                boolean over whether networkx will simplify graph
                simplify on some graphs can cause issues as paths 
                will not be found due to new topology
        Purpose:
            loads the shapefile from the path specified
            generated a networkx graph object from shape file
            turns graph from directed to undirected to ease path finding later
        Return: networkx graph
            returns and undirected networkx graph object

    def correct_graph(graph)
        Arguments:
            graph: networkx graph
                networkx undirected graph that is being used in the program
                should be created from load_shp() function
        Purpose:
            when reading in shapefile networkx will duplicated and create new nodes
            and edges. The new points will have their metadata duplicated from the 
            points and edges they are based on.  This leads to inaccurate distances
            when using precomputed distances from a shapefile.  This function iterates
            through all the points and uses the haversine() function to generate new 
            distances for every edge. New distance data is saved as a length attribute.
            This is used later for shortest_path() and created a weighted graph
        Return: networkx graph
            networkx graph where all edges now have a length attribute in addition topology
            attributes from the shapefile

    def haversine(lon1, lat1, lon2, lat2)
        Arguments:
            lon1: float
                longitude of first point in degrees decimal
            lat1: float
                latitiude of first point in degrees decimal
            lon2: float
                longitude of second point in degrees decimal
            lat2: float
                latitiude of second point in degrees decimal
        Purpose:
            Calculates the greater circle distance between two points given
            used to add length attribute to edges when called by correct_graph()
            uses math library
        Return: float
            returns a distance in miles between the two given points

    def closest_node(start,graph,first = 5.00,second = 50.00)
        Arguments:
            start: Tuple (Lat,Long)
                tuple of (lat,long) in decimal degrees to find closest node
            graph: networkx graph
                networkx graph that is being used in the program
            first(optional): float
                how many miles the nearest node must be for first iteration
            second(optional): float
                how many miles the nearest node must be if not found in the
                first iterate.  A backup plan
        Purpose:
            takes a Tuple of (lat,long) in decimal degrees and looks for the closest
            node in the grap that the given node is near.  When the node is found it
            will be returned.  The loop looks for nodes that are first distance away 
            from the start node by using the haversine() function.  If no nodes are 
            found to be first miles away the function will loop again.  This second 
            loop it will look for nodes that are second miles away by using the 
            haversine().  If no nodes are found nearby the function will return none
            and print "NO NODES FOUND: RETURNED HOME"
        Return: float || None
            Node object from the graph
            NONE if no node found and a print statement

    def find_long(start):
        Arguments:
            start: tuple(Lat,Long)
        Purpose:
        Return:
    def find_lat(start):
        Arguments:
        Purpose:
        Return:
    def intersect(a, b):
        Arguments:
        Purpose:
        Return:
    def generate_globals(graph):
        Arguments:
        Purpose:
        Return:
    def closest_node_optimized(start,graph):
        Arguments:
        Purpose:
        Return:
    def find_nearest(start,valid_nodes):
        Arguments:
        Purpose:
        Return:

    def shortest_path(start_point,end_point,graph)
        Arguments:
            start_point: tuple(float,float)
                tuple of (lat,long) in decimal degrees
            end_point: tuple(float,float)
                tuple of (lat,long) in decimal degrees
            graph: networkx graph
                networkx graph that the program is currently using
        Purpose:
            Find the shortest path between two (lat,long) points.  Calls
            closest_node() in order to find nearest nodes for given points.
            Once nodes are found then runs the shortest_path_length() 
            from networkx to find shortest weighted path from stat and end 
            nodes.  Weight is based on the length attribute that each edge
            should have. if node is NONE then networkx shortest_path_length()
            will default to Calculating shortest distance to every node in 
            the graph and return a dict of distances.  If no path is found 
            function will return -1.0
        Return: float,dict
            if path is found correctly function will return the path 
            if no path is found function returns -1.0
            if no node is specified it will return a dict of distances to 
            every node in the graph


Input.py
    debug = boolean 
        boolean to enable or disable debug statments in the code
    
    def open_file(filename):
        Arguments:
            filename: string
                filepath to CSV file to open
        Purpose:
            opens a file given a filename
        Return: file
            returns a file object
           
    def find_columns(file):
        Arguments:
            file: file
                takes a file that is already open
        Purpose:
            designed to read the header line from the open file and 
            determine which columns the data is stored in.  Uses 
            string matching so columns must be labeled correctly to 
            be discovered accurately.  
        Return: [list],[list]
            returns two lists
                first list is a list of indexes for the columns in the
                header row.  
                    [0]: start_lat
                    [1]: start_long
                    [2]: dest_lat
                    [3]: dest_long
                    [4]: dist column for output
                second list is the header row itself split by commas
                Each entry is a column title and is used for output later
           
    def read_line(columns,file):
        Arguments: 
            columns: [list]
                columns list from find_columns function. Used to index the 
                next line in file
            file: file
                file that we will be pulling lines from. Typically the CSV
                with all the data rows
        Purpose:
            processes the next row of data in the file CSV. Uses the column[]
            to determine where data is saved when the row is split(","). The
            fuction seeks out the start and end points and saves their lat,long
            as a tuple for each point.  Casts the lat and long to floats for use
            later as tuples(float,float) to find nodes
        Return: string,Tuple(Float,Float),Tuple(Float,Float)
            return the entire line that was read by the function as well as two 
            Tuples. One for the starting location start_tuple(lat,long) and One
            for the destination dest_tuple(lat,long) where lat and long are floats

           
    def read_line_given(columns,line):
        Arguments:
            columns: [list]
                columns list from find_columns function. Used to index the 
                next line in file
            line: string
                a single line from the file to be processed in a CSV format

        Purpose:
            Similar to read_line but instead of a file we are given only a line
            this was done to help multiprocessing as now we can break up indexes
            and send only the rows we need to this function.
        Return: string,Tuple(Float,Float),Tuple(Float,Float)
            return the entire line that was read by the function as well as two 
            Tuples. One for the starting location start_tuple(lat,long) and One
            for the destination dest_tuple(lat,long) where lat and long are floats




Driver_Multiprocesses.py
    def calc_distance(row,columns,results,start_index,end_index,graph)
        Arguments:
            row: [list]
                subset of the overall rows to be processed. broken up based
                on number of processes running
            columns: [list]
                columns list from find_columns function. Used to index the 
                next line in file
            results:  multiprocessing.Array[]
                shared memory array where each processes gets select indexes
                where the processes returns the result of the calc_distance
            start_index: int
                index in results to start saving data to
            end_index: int
                index in results to stop saving data to
            graph: networkx graph
                networkx undirected graph that is being used in the program
                should be created from load_shp() function
        Purpose:
            This function is given to a process when the processes is created. 
            the function will go for (end_index - start_index) iterations and 
            Calculates the distance between the two nodes that are extracted 
            from the rows array.  Each entry in rows is a row from the CSV and
            the function will find the start and end locations and find the
            distance between them.  The resulting float is then stored in the
            shared memory array results between the given indexes. Prints are
            output along the way to show progress and once it has completed its
            subset of the work.
        Return: None
            all returns are done by inputting data into the shared memory array
            that the main processes can access later

---------------------------------------------------- Optimization Code----------------------------------------------------

cvxopt_helpers.py

Reader.py

Optimize_Driver.py
